// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: rating.proto

package rating

import (
	context "context"
	common "gitlab.winfra.cs.nycu.edu.tw/112-cn/meal-provider-back-end/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoodRatingServiceClient is the client API for FoodRatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodRatingServiceClient interface {
	CreateFeedback(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*CommentId, error)
	ReadFeedbackByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*FeedbackList, error)
	ReadFeedbackByFoodId(ctx context.Context, in *FoodId, opts ...grpc.CallOption) (*FeedbackList, error)
	ReadFeedbackByFoodRating(ctx context.Context, in *FoodId, opts ...grpc.CallOption) (*FeedbackList, error)
	ReadFeedbackByCommentId(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Feedback, error)
	UpdateFeedback(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*common.Status, error)
	DeleteFeedback(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*common.Status, error)
}

type foodRatingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodRatingServiceClient(cc grpc.ClientConnInterface) FoodRatingServiceClient {
	return &foodRatingServiceClient{cc}
}

func (c *foodRatingServiceClient) CreateFeedback(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*CommentId, error) {
	out := new(CommentId)
	err := c.cc.Invoke(ctx, "/meal_provider.FoodRatingService/CreateFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodRatingServiceClient) ReadFeedbackByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*FeedbackList, error) {
	out := new(FeedbackList)
	err := c.cc.Invoke(ctx, "/meal_provider.FoodRatingService/ReadFeedbackByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodRatingServiceClient) ReadFeedbackByFoodId(ctx context.Context, in *FoodId, opts ...grpc.CallOption) (*FeedbackList, error) {
	out := new(FeedbackList)
	err := c.cc.Invoke(ctx, "/meal_provider.FoodRatingService/ReadFeedbackByFoodId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodRatingServiceClient) ReadFeedbackByFoodRating(ctx context.Context, in *FoodId, opts ...grpc.CallOption) (*FeedbackList, error) {
	out := new(FeedbackList)
	err := c.cc.Invoke(ctx, "/meal_provider.FoodRatingService/ReadFeedbackByFoodRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodRatingServiceClient) ReadFeedbackByCommentId(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Feedback, error) {
	out := new(Feedback)
	err := c.cc.Invoke(ctx, "/meal_provider.FoodRatingService/ReadFeedbackByCommentId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodRatingServiceClient) UpdateFeedback(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/meal_provider.FoodRatingService/UpdateFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodRatingServiceClient) DeleteFeedback(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/meal_provider.FoodRatingService/DeleteFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodRatingServiceServer is the server API for FoodRatingService service.
// All implementations must embed UnimplementedFoodRatingServiceServer
// for forward compatibility
type FoodRatingServiceServer interface {
	CreateFeedback(context.Context, *Feedback) (*CommentId, error)
	ReadFeedbackByUserId(context.Context, *UserId) (*FeedbackList, error)
	ReadFeedbackByFoodId(context.Context, *FoodId) (*FeedbackList, error)
	ReadFeedbackByFoodRating(context.Context, *FoodId) (*FeedbackList, error)
	ReadFeedbackByCommentId(context.Context, *CommentId) (*Feedback, error)
	UpdateFeedback(context.Context, *UpdateRequest) (*common.Status, error)
	DeleteFeedback(context.Context, *CommentId) (*common.Status, error)
	mustEmbedUnimplementedFoodRatingServiceServer()
}

// UnimplementedFoodRatingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFoodRatingServiceServer struct {
}

func (UnimplementedFoodRatingServiceServer) CreateFeedback(context.Context, *Feedback) (*CommentId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedback not implemented")
}
func (UnimplementedFoodRatingServiceServer) ReadFeedbackByUserId(context.Context, *UserId) (*FeedbackList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFeedbackByUserId not implemented")
}
func (UnimplementedFoodRatingServiceServer) ReadFeedbackByFoodId(context.Context, *FoodId) (*FeedbackList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFeedbackByFoodId not implemented")
}
func (UnimplementedFoodRatingServiceServer) ReadFeedbackByFoodRating(context.Context, *FoodId) (*FeedbackList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFeedbackByFoodRating not implemented")
}
func (UnimplementedFoodRatingServiceServer) ReadFeedbackByCommentId(context.Context, *CommentId) (*Feedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFeedbackByCommentId not implemented")
}
func (UnimplementedFoodRatingServiceServer) UpdateFeedback(context.Context, *UpdateRequest) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedback not implemented")
}
func (UnimplementedFoodRatingServiceServer) DeleteFeedback(context.Context, *CommentId) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeedback not implemented")
}
func (UnimplementedFoodRatingServiceServer) mustEmbedUnimplementedFoodRatingServiceServer() {}

// UnsafeFoodRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodRatingServiceServer will
// result in compilation errors.
type UnsafeFoodRatingServiceServer interface {
	mustEmbedUnimplementedFoodRatingServiceServer()
}

func RegisterFoodRatingServiceServer(s grpc.ServiceRegistrar, srv FoodRatingServiceServer) {
	s.RegisterService(&FoodRatingService_ServiceDesc, srv)
}

func _FoodRatingService_CreateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feedback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodRatingServiceServer).CreateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meal_provider.FoodRatingService/CreateFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodRatingServiceServer).CreateFeedback(ctx, req.(*Feedback))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodRatingService_ReadFeedbackByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodRatingServiceServer).ReadFeedbackByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meal_provider.FoodRatingService/ReadFeedbackByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodRatingServiceServer).ReadFeedbackByUserId(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodRatingService_ReadFeedbackByFoodId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoodId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodRatingServiceServer).ReadFeedbackByFoodId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meal_provider.FoodRatingService/ReadFeedbackByFoodId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodRatingServiceServer).ReadFeedbackByFoodId(ctx, req.(*FoodId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodRatingService_ReadFeedbackByFoodRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoodId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodRatingServiceServer).ReadFeedbackByFoodRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meal_provider.FoodRatingService/ReadFeedbackByFoodRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodRatingServiceServer).ReadFeedbackByFoodRating(ctx, req.(*FoodId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodRatingService_ReadFeedbackByCommentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodRatingServiceServer).ReadFeedbackByCommentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meal_provider.FoodRatingService/ReadFeedbackByCommentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodRatingServiceServer).ReadFeedbackByCommentId(ctx, req.(*CommentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodRatingService_UpdateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodRatingServiceServer).UpdateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meal_provider.FoodRatingService/UpdateFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodRatingServiceServer).UpdateFeedback(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodRatingService_DeleteFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodRatingServiceServer).DeleteFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meal_provider.FoodRatingService/DeleteFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodRatingServiceServer).DeleteFeedback(ctx, req.(*CommentId))
	}
	return interceptor(ctx, in, info, handler)
}

// FoodRatingService_ServiceDesc is the grpc.ServiceDesc for FoodRatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoodRatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meal_provider.FoodRatingService",
	HandlerType: (*FoodRatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeedback",
			Handler:    _FoodRatingService_CreateFeedback_Handler,
		},
		{
			MethodName: "ReadFeedbackByUserId",
			Handler:    _FoodRatingService_ReadFeedbackByUserId_Handler,
		},
		{
			MethodName: "ReadFeedbackByFoodId",
			Handler:    _FoodRatingService_ReadFeedbackByFoodId_Handler,
		},
		{
			MethodName: "ReadFeedbackByFoodRating",
			Handler:    _FoodRatingService_ReadFeedbackByFoodRating_Handler,
		},
		{
			MethodName: "ReadFeedbackByCommentId",
			Handler:    _FoodRatingService_ReadFeedbackByCommentId_Handler,
		},
		{
			MethodName: "UpdateFeedback",
			Handler:    _FoodRatingService_UpdateFeedback_Handler,
		},
		{
			MethodName: "DeleteFeedback",
			Handler:    _FoodRatingService_DeleteFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rating.proto",
}
